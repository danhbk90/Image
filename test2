// Atamakazu =o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=
//
// Atamakazu H : Copyright(C) 2014-2015 NEC Solution Innovators, Ltd. All Rights Reserved.
//
// =o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=o=

#ifndef __ATAMAKAZU_H__
#define __ATAMAKAZU_H__

#include <string>
#include <vector>

#include <iostream>
#include <fstream>
#include <sys/time.h>

//	OpenCV ヘッダ取り込み
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>

using namespace std;
using namespace cv;

// properties ///////////////////////////////////////

enum BGSMethod{
	BGS,
	AD,
	MOG,
	MOG2,
	GMG,
	NONE
};

//	設定
struct ATK_PROP {
	Mat areaImg;						// カウント対象領域設定画像。対象領域として利用可能な階調は5～255のうち、5で割りきれる階調であること、矩形で傾いていないこと。
	bool reverse;					// 入退場方向の反転。デフォルトは、上から下方向を入場とする。
	int noise;						// ノイズピクセル数（フレームあたり0～1）
	double minDistance;			// これ以下の移動があったピクセルはノイズと見做す。
	double maxDistance;			// これ以上の移動があったピクセルはノイズと見做す。
	double movingUnit[51];      // 	動体あたりのピクセル数（要キャリブレーション）
	enum BGSMethod bgsMethod;	// 背景差分取得方法
	int winSize;						// 移動度検出用ウィンドウサイズ
	int step;							// 移動度検出間隔
};

static Mat atkBinalized; //foreground mask generated by Background Subtractor

// methods ////////////////////////////////////////
//20150310 change
bool atkInitialize(struct ATK_PROP prop,cv::Rect &roi);
void atkGetAreaSize();
void atkCount(Mat* frame,Mat &fFrame);
double* atkGetinVectors();
double* atkGetoutVectors();
//20150310 change end
int* atkGetAreaSizes();

bool atkBackgroundSubtraction(Mat *frame);
int* atkGetMovingPixels();
void atkGetMovingCount(Mat *frame);
//20150310 change
void atkGetDirections(Mat *frame, Mat *dst);
//20150310 change end
void atkAreaCount();

double atkSetCount(double *counts);

double atkGetTimeOfDay(double);
void atkCloneIgnoreDepth(IplImage *src, IplImage *dst);

double atkGetInCount();
double atkGetOutCount();
int atkGetFrameCount();
void atkRelease();
void atkImageLog(const char* propName, IplImage* ipl);
void atkVideoLog(const char* winName, IplImage* ipl, CvVideoWriter* videoSrc);

#endif
